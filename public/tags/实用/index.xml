<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>实用 on 煎人寿</title>
        <link>http://47.99.84.217/tags/%E5%AE%9E%E7%94%A8/</link>
        <description>Recent content in 实用 on 煎人寿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 31 Jul 2019 15:03:49 +0800</lastBuildDate><atom:link href="http://47.99.84.217/tags/%E5%AE%9E%E7%94%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据结构(1)</title>
        <link>http://47.99.84.217/post/datastructureone/</link>
        <pubDate>Wed, 31 Jul 2019 15:03:49 +0800</pubDate>
        
        <guid>http://47.99.84.217/post/datastructureone/</guid>
        <description>&lt;p&gt;在计算机科学中, 数据结构是计算机中存储, 组织数据的方式.为编程语言提供数据类型; 一个好的数据结构应该尽可能的使用较少的空间和时间资源, 支持各种程序的运行. 忘记在哪里看到的了, 一个程序就是&lt;strong&gt;数据结构+算法&lt;/strong&gt;; 常见的数据结构如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;堆&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;链表&#34;&gt;链表&lt;/h3&gt;
&lt;p&gt;在物理内存上不一定是一段连续的存储空间, 增删的效率高于数组,因为他的特点是将&lt;strong&gt;数据与指标&lt;/strong&gt;进行配对并指导计算机根据指标在内存中进行上/下一条数据的数据操作;增删的效率要比数组高, 因为不需要修改内存结构. 但是在查询上与数组一样, 都是线性查找;&lt;/p&gt;
&lt;h4 id=&#34;单向链表&#34;&gt;单向链表&lt;/h4&gt;
&lt;p&gt;单向链表是链表中最简单的一种, 一个元素包含两个域,一个&lt;strong&gt;信息域&lt;/strong&gt;和&lt;strong&gt;指针域&lt;/strong&gt;;, 一个元素被分成两个部分, 信息域保存或者显示有关元素的信息, 另外一个部分存储链表中的下一个元素,形成链接, 最后一个元素的节点指针指向空.单向链表只能通过&lt;code&gt;next&lt;/code&gt;指针指向下一个节点; &lt;img src=&#34;http://img.52smile.vip/blog/2019-07-31-073150.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;单向链表&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;双向链表&#34;&gt;双向链表&lt;/h4&gt;
&lt;p&gt;双向链表比单向链表复杂一些, 比单向链表多了一个&lt;code&gt;prev&lt;/code&gt;指针指向上一个节点, 也就是说第二个元素可以知道我上一个节点和下一个节点在 位置信息; &lt;img src=&#34;http://img.52smile.vip/blog/2019-07-31-075456.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;双向链表&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环链表&#34;&gt;循环链表&lt;/h4&gt;
&lt;p&gt;循环链表中的首节点元素和末尾节点元素连接在一起. &lt;img src=&#34;http://img.52smile.vip/blog/2019-08-01-015725.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;循环链表&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;常见算法&#34;&gt;常见算法:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;输入一个单向链表, 输出反转链表&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//单链表的转置,循环方法
Node* reverseByLoop(Node *head)
{
    if(head == NULL  head-&amp;gt;next == NULL)
        return head;
    Node *pre = NULL;
    Node *next = NULL;
    while(head != NULL)
    {
        next = head-&amp;gt;next;
        head-&amp;gt;next = pre;
        pre = head;
        head = next;
    }
    return pre;
}
//单链表的转置,递归方法
Node* reverseByRecursion(Node *head)
{
    //第一个条件是判断异常，第二个条件是结束判断
    if(head == NULL  head-&amp;gt;next == NULL)
        return head;
    Node *newHead = reverseByRecursion(head-&amp;gt;next);
    head-&amp;gt;next-&amp;gt;next = head;
    head-&amp;gt;next = NULL;
    return newHead;    //返回新链表的头指针
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
